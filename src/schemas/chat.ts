// THESE TYPES HAVE BEEN GENERATED BY AI BY COPYING THE TYPES FROM THE OPENAI API DOCUMENTATION
// AND THEN MODIFYING THEM TO FIT THE ZOD SCHEMA
import {z} from '@hono/zod-openapi';

// OpenAI Message Schema - exact match to their API
const messageSchema = z.object({
    content: z.union([
        z.string(),
        z.array(z.object({
            image_url: z.object({
                detail: z.enum(['auto', 'low', 'high']).optional(),
                url: z.string(),
            }).optional(),
            text: z.string().optional(),
            type: z.string(),
        })).optional(),
    ]).nullable(),
    name: z.string().optional(),
    role: z.enum(['system', 'user', 'assistant', 'tool']),
    tool_call_id: z.string().optional(),
    tool_calls: z.array(z.object({
        function: z.object({
            arguments: z.string(),
            name: z.string(),
        }),
        id: z.string(),
        type: z.literal('function'),
    })).optional(),
});

// Tool Schema
const toolSchema = z.object({
    function: z.object({
        description: z.string().optional(),
        name: z.string(),
        parameters: z.record(z.any()).optional(),
    }),
    type: z.literal('function'),
});

// Response Format Schema
const responseFormatSchema = z.object({
    json_schema: z.object({
        description: z.string().optional(),
        name: z.string(),
        schema: z.record(z.any()).optional(),
        strict: z.boolean().optional(),
    }).optional(),
    type: z.enum(['text', 'json_object', 'json_schema']),
});

// OpenAI Chat Completion Request Schema - exact match
export const chatRequestSchema = z.object({
    frequency_penalty: z.number().min(-2).max(2).optional(),
    logit_bias: z.record(z.number()).optional(),
    logprobs: z.boolean().optional(),
    max_completion_tokens: z.number().positive().optional(),
    max_tokens: z.number().positive().optional(),
    messages: z.array(messageSchema),
    model: z.string(),
    n: z.number().positive().optional(),
    parallel_tool_calls: z.boolean().optional(),
    presence_penalty: z.number().min(-2).max(2).optional(),
    response_format: responseFormatSchema.optional(),
    seed: z.number().optional(),
    service_tier: z.enum(['auto', 'default']).optional(),
    stop: z.union([z.string(), z.array(z.string())]).optional(),
    stream: z.boolean().optional(),
    stream_options: z.object({
        include_usage: z.boolean().optional(),
    }).optional(),
    temperature: z.number().min(0).max(2).optional(),
    tool_choice: z.union([
        z.enum(['none', 'auto', 'required']),
        z.object({
            function: z.object({
                name: z.string(),
            }),
            type: z.literal('function'),
        }),
    ]).optional(),
    tools: z.array(toolSchema).optional(),
    top_logprobs: z.number().min(0).max(20).optional(),
    top_p: z.number().min(0).max(1).optional(),
    user: z.string().optional(),
}).openapi({
    description: 'OpenAI Chat Completion Request (exact API match)',
});

export const errorResponseSchema = z.object({
    error: z.string(),
}).openapi({
    description: 'Error response',
});
