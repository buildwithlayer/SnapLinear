// THESE TYPES HAVE BEEN GENERATED BY AI BY COPYING THE TYPES FROM THE OPENAI API DOCUMENTATION
// AND THEN MODIFYING THEM TO FIT THE ZOD SCHEMA
import { z } from '@hono/zod-openapi';

// OpenAI Message Schema - exact match to their API
const messageSchema = z.object({
  role: z.enum(['system', 'user', 'assistant', 'tool']),
  content: z.union([
    z.string(),
    z.array(z.object({
      type: z.string(),
      text: z.string().optional(),
      image_url: z.object({
        url: z.string(),
        detail: z.enum(['auto', 'low', 'high']).optional()
      }).optional()
    })).optional()
  ]).nullable(),
  name: z.string().optional(),
  tool_calls: z.array(z.object({
    id: z.string(),
    type: z.literal('function'),
    function: z.object({
      name: z.string(),
      arguments: z.string()
    })
  })).optional(),
  tool_call_id: z.string().optional()
});

// Tool Schema
const toolSchema = z.object({
  type: z.literal('function'),
  function: z.object({
    name: z.string(),
    description: z.string().optional(),
    parameters: z.record(z.any()).optional()
  })
});

// Response Format Schema
const responseFormatSchema = z.object({
  type: z.enum(['text', 'json_object', 'json_schema']),
  json_schema: z.object({
    name: z.string(),
    description: z.string().optional(),
    schema: z.record(z.any()).optional(),
    strict: z.boolean().optional()
  }).optional()
});

// OpenAI Chat Completion Request Schema - exact match
export const chatRequestSchema = z.object({
  model: z.string(),
  messages: z.array(messageSchema),
  frequency_penalty: z.number().min(-2).max(2).optional(),
  logit_bias: z.record(z.number()).optional(),
  logprobs: z.boolean().optional(),
  top_logprobs: z.number().min(0).max(20).optional(),
  max_tokens: z.number().positive().optional(),
  max_completion_tokens: z.number().positive().optional(),
  n: z.number().positive().optional(),
  presence_penalty: z.number().min(-2).max(2).optional(),
  response_format: responseFormatSchema.optional(),
  seed: z.number().optional(),
  service_tier: z.enum(['auto', 'default']).optional(),
  stop: z.union([z.string(), z.array(z.string())]).optional(),
  stream: z.boolean().optional(),
  stream_options: z.object({
    include_usage: z.boolean().optional()
  }).optional(),
  temperature: z.number().min(0).max(2).optional(),
  top_p: z.number().min(0).max(1).optional(),
  tools: z.array(toolSchema).optional(),
  tool_choice: z.union([
    z.enum(['none', 'auto', 'required']),
    z.object({
      type: z.literal('function'),
      function: z.object({
        name: z.string()
      })
    })
  ]).optional(),
  parallel_tool_calls: z.boolean().optional(),
  user: z.string().optional()
}).openapi({
  description: 'OpenAI Chat Completion Request (exact API match)'
});

export const errorResponseSchema = z.object({
  error: z.string(),
}).openapi({
  description: 'Error response',
});
